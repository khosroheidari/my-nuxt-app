{"file":"register-JSf7DPy_.js","mappings":";;;;;;;;;;;;;;;;;;;;AAIA,MAAM,iBAAiB;AAAA,EACnB,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,eAAe;AAAA,EACf,mBAAmB;AAAA,EACnB,OAAO;AACX;AAGE,MAAM,MAAM,cAAc,cAAc;AAG3B,QAAQ,GAAG;;;;;AC4CH,QAAI,mBAAqB;AAChD,UAAM,QAAQ,IAAI,EAAE;AACpB,UAAM,WAAW,IAAI,EAAE;AACvB,UAAM,QAAQ,IAAI,EAAE;AACpB,UAAM,UAAU,IAAI,EAAE;AACtB,UAAM,UAAU,IAAI,KAAK;AACV,cAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../services/firebase.js","../../../../pages/register.vue"],"sourcesContent":["// services/firebase.js\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyDgtv7bEyCFjWij7yDSJDKNHMVzJAg9vrI',\n    authDomain: 'taskdoing-3cec7.firebaseapp.com',\n    projectId: 'taskdoing-3cec7',\n    storageBucket: 'taskdoing-3cec7.appspot.com',\n    messagingSenderId: '242812125632',\n    appId: '1:242812125632:web:9b287b2781c9897800c825',\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n\n  // Initialize Firebase Authentication\n  const auth = getAuth(app);\n\n  // Optionally return the Firebase app instance to use it in other parts of the app\n  export { auth };\n","<template>\n  <div\n    class=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-r from-blue-400 to-indigo-500 text-white p-4\"\n  >\n    <h1 class=\"text-4xl font-bold mb-4\">Register</h1>\n    <form @submit.prevent=\"registerUser\" class=\"flex flex-col w-full max-w-md\">\n      <input\n        type=\"email\"\n        v-model=\"email\"\n        placeholder=\"Email\"\n        class=\"p-2 mb-4 rounded-md border-2 border-white bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-white\"\n        aria-label=\"Email\"\n      />\n      <input\n        type=\"password\"\n        v-model=\"password\"\n        placeholder=\"Password\"\n        class=\"p-2 mb-4 rounded-md border-2 border-white bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-white\"\n        aria-label=\"Password\"\n      />\n      <span v-if=\"error\" class=\"text-red-500 mb-2\">{{ error }}</span>\n      <button\n        type=\"submit\"\n        class=\"bg-white text-blue-500 px-4 py-2 rounded-md hover:bg-gray-200 transition duration-300\"\n        :disabled=\"loading\" <!-- Disable button while loading -->\n      >\n        <span v-if=\"loading\">Registering...</span>\n        <span v-else>Register</span>\n      </button>\n      <button\n        @click.prevent=\"signInWithGoogle\"\n        class=\"mt-2 bg-white text-red-500 px-4 py-2 rounded-md hover:bg-gray-200 transition duration-300\"\n      >\n        Sign in with Google\n      </button>\n      <span v-if=\"success\" class=\"text-green-500 mt-4\">{{ success }}</span>\n    </form>\n\n    <div class=\"mt-6\">\n      <nuxt-link\n        to=\"/\"\n        class=\"bg-white text-blue-500 px-4 py-2 rounded-md hover:bg-gray-200 transition duration-300\"\n      >\n        Back to Home\n      </nuxt-link>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport {\n  getAuth,\n  createUserWithEmailAndPassword,\n  GoogleAuthProvider,\n  signInWithPopup,\n  onAuthStateChanged,\n} from 'firebase/auth';\nimport { auth } from '@/services/firebase';\n\nconst googleProvider = new GoogleAuthProvider();\nconst email = ref('');\nconst password = ref('');\nconst error = ref('');\nconst success = ref('');\nconst loading = ref(false); // New loading state\nconst router = useRouter();\n\nconst registerUser = async () => {\n  if (!email.value || !password.value) {\n    error.value = 'Email and password are required.';\n    return;\n  }\n\n  error.value = '';\n  success.value = '';\n  loading.value = true; // Set loading to true\n\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email.value, password.value);\n    const user = userCredential.user;\n\n    success.value = 'Registration successful! Redirecting...';\n    email.value = '';\n    password.value = '';\n\n    // Optional: Delay before redirecting\n    setTimeout(() => {\n      loading.value = false; // Reset loading state\n      router.push('/dashboard');\n    }, 2000);\n  } catch (err) {\n    error.value = err.message;\n    console.error('Registration error:', err);\n  } finally {\n    loading.value = false; // Ensure loading state is reset\n  }\n};\n\nconst signInWithGoogle = async () => {\n  error.value = '';\n  success.value = '';\n  loading.value = true; // Set loading to true\n\n  try {\n    const userCredential = await signInWithPopup(auth, googleProvider);\n    const user = userCredential.user;\n\n    success.value = 'Signed in with Google! Redirecting...';\n    console.log('User signed in with Google:', user);\n\n    // Optional: Delay before redirecting\n    setTimeout(() => {\n      loading.value = false; // Reset loading state\n      router.push('/dashboard');\n    }, 2000);\n  } catch (err) {\n    if (err.code === 'auth/popup-closed-by-user') {\n      error.value = 'Popup closed by user.';\n    } else if (err.code === 'auth/account-exists-with-different-credential') {\n      error.value = 'An account already exists with this email address but different credentials.';\n    } else {\n      error.value = err.message;\n    }\n    console.error('Google Sign-in error:', err);\n  } finally {\n    loading.value = false; // Ensure loading state is reset\n  }\n};\n\nonMounted(() => {\n  onAuthStateChanged(auth, (user) => {\n    if (user) {\n      console.log('User is signed in:', user);\n      router.push('/dashboard');\n    }\n  });\n});\n</script>\n\n"],"version":3}