{"version":3,"file":"index-C9TnZkQ0.js","sources":["../../../../store/useAuthStore.js","../../../../pages/index.vue"],"sourcesContent":["// store/useAuthStore.js\nimport { defineStore } from 'pinia';\nimport { useNuxtApp } from '#app'; // This will allow you to access the provided `auth`\n\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    user: null,\n  }),\n  actions: {\n    setUser(user) {\n      this.user = user;\n    },\n    logUserOut() {\n      this.user = null;\n    },\n    // Example of using auth in an action\n    async login(email, password) {\n      const { auth } = useNuxtApp(); // Get the auth instance\n      // Use auth for logging in...\n    },\n  },\n});\n","<template>\n  <div\n    class=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-r from-blue-400 to-indigo-500 text-white px-4\"\n  >\n    <h1 class=\"text-4xl font-bold mb-8\">Welcome to Your To-Do App!</h1>\n    <div v-if=\"user\">\n      <form @submit.prevent=\"addTask\" class=\"flex flex-col items-center mb-6\">\n        <input\n          type=\"text\"\n          v-model=\"newTask\"\n          placeholder=\"Add a new task\"\n          class=\"p-2 rounded-l-md border-2 border-white bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-white mb-2\"\n        />\n        <span v-if=\"error\" class=\"text-red-500 mb-2\">{{ error }}</span>\n        <button\n          type=\"submit\"\n          class=\"bg-white text-blue-500 px-4 rounded-md hover:bg-gray-200 transition duration-300\"\n        >\n          Add Task\n        </button>\n      </form>\n      <ul class=\"w-full max-w-md\">\n        <li\n          v-for=\"task in tasks\"\n          :key=\"task._id\"\n          class=\"bg-white text-blue-500 p-4 mb-2 rounded-lg shadow-md flex justify-between items-center transition-transform transform hover:scale-105\"\n        >\n          {{ task.title }}\n          <button\n            @click=\"deleteTask(task._id)\"\n            class=\"bg-red-500 text-white px-2 rounded hover:bg-red-600 transition duration-300\"\n          >\n            Delete\n          </button>\n        </li>\n      </ul>\n\n      <button @click=\"signOut\" class=\"mt-4 bg-white text-blue-500 px-4 py-2 rounded-md hover:bg-gray-200 transition duration-300\">\n        Sign Out\n      </button>\n    </div>\n\n    <div class=\"bg-blue-500 clip-bottom\"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\nimport axios from 'axios';\nimport { useAuthStore } from '~/store/useAuthStore';\nimport { useNuxtApp } from '#app';\nimport { onAuthStateChanged, signOut as firebaseSignOut } from 'firebase/auth';\n\nconst { auth } = useNuxtApp(); // Get the auth instance from Nuxt app\nconst newTask = ref('');\nconst tasks = ref([]);\nconst error = ref('');\nconst authStore = useAuthStore();\n\nconst user = computed(() => authStore.user);\n\n// Function to fetch tasks from the backend\nconst fetchTasks = async () => {\n  try {\n    const token = localStorage.getItem('token');\n\n    const response = await axios.get('http://localhost:5003/api/tasks', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    tasks.value = response.data;\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    error.value = 'Failed to fetch tasks. Please try again.';\n  }\n};\n\n// Function to add a new task\nconst addTask = async () => {\n  if (newTask.value.trim() === '') {\n    error.value = 'Task cannot be empty!';\n    return;\n  }\n  try {\n    const token = localStorage.getItem('token');\n\n    const response = await axios.post(\n      'http://localhost:5003/api/tasks',\n      {\n        title: newTask.value,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    tasks.value.push(response.data);\n    newTask.value = '';\n    error.value = '';\n  } catch (error) {\n    console.error('Error adding task:', error);\n    error.value = 'Failed to add task. Please try again.';\n  }\n};\n\n// Function to delete a task\nconst deleteTask = async (taskId) => {\n  try {\n    const token = localStorage.getItem('token');\n\n    await axios.delete(`http://localhost:5003/api/tasks/${taskId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    tasks.value = tasks.value.filter((task) => task._id !== taskId);\n  } catch (error) {\n    console.error('Error deleting task:', error);\n    error.value = 'Failed to delete task. Please try again.';\n  }\n};\n\nonMounted(async () => {\n  onAuthStateChanged(auth, (currentUser) => {\n    authStore.setUser(currentUser);\n    if (currentUser) {\n      console.log('User is signed in:', currentUser.uid);\n      fetchTasks();\n    } else {\n      console.log('User is signed out');\n      tasks.value = [];\n    }\n  });\n});\n\n// Function to sign out\nconst signOut = async () => {\n  try {\n    await firebaseSignOut(auth);\n    localStorage.removeItem('token');\n    authStore.logUserOut();\n  } catch (err) {\n    console.error('Error signing out:', err);\n    error.value = 'Sign out failed. Please try again.';\n  }\n};\n</script>\n\n<style scoped>\n.clip-bottom {\n  clip-path: polygon(0 100%, 50% 80%, 100% 100%, 100% 0, 0 0);\n  height: 150px;\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAIO,MAAM,eAAe,YAAY,QAAQ;AAAA,EAC9C,OAAO,OAAO;AAAA,IACZ,MAAM;AAAA,EACV;AAAA,EACE,SAAS;AAAA,IACP,QAAQ,MAAM;AACZ,WAAK,OAAO;AAAA,IACb;AAAA,IACD,aAAa;AACX,WAAK,OAAO;AAAA,IACb;AAAA;AAAA,IAED,MAAM,MAAM,OAAO,UAAU;AACV,iBAAa;AAAA,IAE/B;AAAA,EACF;AACH,CAAC;;;;;ACgCgB,eAAa;AAC9B,UAAM,UAAU,IAAI,EAAE;AACtB,UAAM,QAAQ,IAAI,CAAA,CAAE;AACpB,UAAM,QAAQ,IAAI,EAAE;AACpB,UAAM,YAAY,aAAY;AAE9B,UAAM,OAAO,SAAS,MAAM,UAAU,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}